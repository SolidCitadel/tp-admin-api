name: CI/CD - Build, Push to ECR, and Deploy to EC2

on:
  workflow_dispatch: # 수동 실행을 위한 트리거 추가

permissions:
  id-token: write
  contents: read

jobs:
  # =================================================
  # 1. Build Job: 이미지를 빌드하고 ECR에 푸시
  # =================================================
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    # 이 작업의 결과물(outputs)을 다른 작업에서 사용할 수 있도록 명시적으로 선언합니다.
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test --no-daemon
          FULL_IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $FULL_IMAGE_NAME .
          docker push $FULL_IMAGE_NAME
          echo "image_uri=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT

  # =================================================
  # 2. Deploy Job: EC2에 배포
  # =================================================
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build # 'build' 작업이 성공해야만 이 작업이 실행됩니다.
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Create imagedefinitions.json for CodeDeploy
        env:
          # needs 컨텍스트를 사용하여 build 작업의 출력값을 직접, 안전하게 참조합니다.
          IMAGE_URI: ${{ needs.build.outputs.image_uri }}
          CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
        run: |
          echo "Received Image URI to deploy: $IMAGE_URI"
          printf '[{"name":"%s","imageUri":"%s"}]' "$CONTAINER_NAME" "$IMAGE_URI" > imagedefinitions.json
          echo "Generated imagedefinitions.json content:"
          cat imagedefinitions.json

      - name: Create .env file
        run: |
          echo "SPRING_APPLICATION_NAME=${{ vars.SPRING_APPLICATION_NAME }}" >> .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "ADMIN_TOKEN=${{ secrets.ADMIN_TOKEN }}" >> .env

      - name: Prepare deploy directory
        run: |
          mkdir deploy
          cp .env deploy/
          cp Dockerfile deploy/
          cp docker-compose.yml deploy/
          cp -r nginx/ deploy/
          cp -r scripts/ deploy
          cp appspec.yml deploy/
          cp imagedefinitions.json deploy/

      - name: Make zip file for CodeDeploy
        run: |
          cd deploy
          zip -r ../deploy.zip .
          cd ..

      - name: Upload zip to S3
        id: upload-s3
        env:
          S3_BUCKET: ${{ vars.S3_BUCKET }}
        run: |
          aws s3 cp deploy.zip s3://$S3_BUCKET/deploy.zip
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "s3_key=deploy.zip" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 via CodeDeploy
        env:
          APP_NAME: ${{ vars.CODE_DEPLOY_APP_NAME }}
          GROUP_NAME: ${{ vars.CODE_DEPLOY_GROUP_NAME }}
        run: |
          aws deploy create-deployment \
            --application-name $APP_NAME \
            --deployment-group-name $GROUP_NAME \
            --s3-location bucket=${{ steps.upload-s3.outputs.s3_bucket }},key=${{ steps.upload-s3.outputs.s3_key }},bundleType=zip